
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 02 10:50:44 COT 2009
//----------------------------------------------------

package T5;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 02 10:50:44 COT 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\005\000\002\004\013" +
    "\000\002\004\014\000\002\004\014\000\002\004\014\000" +
    "\002\004\014\000\002\004\014\000\002\004\014\000\002" +
    "\004\014\000\002\004\014\000\002\004\014\000\002\004" +
    "\012\000\002\004\013\000\002\004\013\000\002\004\013" +
    "\000\002\004\013\000\002\004\013\000\002\004\013\000" +
    "\002\004\013\000\002\004\013\000\002\004\013\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\007\005" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\004\000\002\007\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\013\000\002\013\013\000\002\013\012\000" +
    "\002\014\007\000\002\014\007\000\002\014\006\000\002" +
    "\034\012\000\002\034\011\000\002\015\016\000\002\015" +
    "\015\000\002\002\005\000\002\002\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\004\000\002\023\004\000\002\016\012\000\002" +
    "\016\011\000\002\017\014\000\002\017\013\000\002\020" +
    "\010\000\002\020\007\000\002\035\016\000\002\035\015" +
    "\000\002\024\010\000\002\024\007\000\002\025\010\000" +
    "\002\025\011\000\002\025\012\000\002\025\010\000\002" +
    "\025\007\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\026\010\000\002\026\007\000\002\027\011\000" +
    "\002\027\011\000\002\027\011\000\002\027\007\000\002" +
    "\027\007\000\002\027\011\000\002\027\010\000\002\027" +
    "\010\000\002\027\010\000\002\027\006\000\002\027\006" +
    "\000\002\027\010\000\002\030\005\000\002\030\007\000" +
    "\002\030\011\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\021" +
    "\007\000\002\021\010\000\002\021\010\000\002\021\006" +
    "\000\002\021\007\000\002\021\007\000\002\033\003\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\016\004\013\010\004\011\010\012\014\047" +
    "\012\051\007\001\002\000\010\005\016\014\020\051\017" +
    "\001\002\000\012\004\013\010\004\011\010\012\014\001" +
    "\002\000\004\002\u012a\001\002\000\004\032\u0127\001\002" +
    "\000\010\005\016\014\020\051\017\001\002\000\006\002" +
    "\uffff\043\uffff\001\002\000\004\051\u010d\001\002\000\010" +
    "\005\016\014\020\051\017\001\002\000\010\005\016\014" +
    "\020\051\017\001\002\000\004\046\021\001\002\000\006" +
    "\046\uffe8\050\uffe8\001\002\000\006\046\uffe7\050\uffe7\001" +
    "\002\000\006\046\uffe6\050\uffe6\001\002\000\010\010\022" +
    "\011\023\012\024\001\002\000\004\051\377\001\002\000" +
    "\004\051\371\001\002\000\004\051\025\001\002\000\004" +
    "\050\026\001\002\000\004\041\027\001\002\000\040\005" +
    "\016\006\055\010\043\011\045\012\041\014\020\017\040" +
    "\020\031\022\044\023\061\025\047\026\030\027\064\041" +
    "\060\051\035\001\002\000\004\046\364\001\002\000\004" +
    "\046\353\001\002\000\010\042\uffce\043\uffce\050\uffce\001" +
    "\002\000\010\042\uffe0\043\uffe0\050\uffe0\001\002\000\010" +
    "\042\uffcf\043\uffcf\050\uffcf\001\002\000\012\032\164\035" +
    "\173\036\175\046\uffe7\001\002\000\010\042\uffcd\043\uffcd" +
    "\050\uffcd\001\002\000\010\042\uffdf\043\uffdf\050\uffdf\001" +
    "\002\000\004\046\333\001\002\000\006\043\252\051\253" +
    "\001\002\000\004\043\327\001\002\000\006\043\252\051" +
    "\253\001\002\000\004\046\267\001\002\000\006\043\252" +
    "\051\253\001\002\000\004\046\235\001\002\000\004\046" +
    "\217\001\002\000\010\042\uffca\043\uffca\050\uffca\001\002" +
    "\000\010\042\uffcb\043\uffcb\050\uffcb\001\002\000\010\042" +
    "\uffcc\043\uffcc\050\uffcc\001\002\000\040\005\016\006\055" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\042\uffe1\043\uffe1\050\uffe1\051\160" +
    "\001\002\000\010\042\uffc8\043\uffc8\050\uffc8\001\002\000" +
    "\004\046\140\001\002\000\010\042\uffde\043\uffde\050\uffde" +
    "\001\002\000\004\042\136\001\002\000\040\005\016\006" +
    "\055\010\043\011\045\012\041\014\020\017\040\020\031" +
    "\022\044\023\061\025\047\026\030\027\064\041\060\051" +
    "\035\001\002\000\004\046\102\001\002\000\010\042\uffdc" +
    "\043\uffdc\050\uffdc\001\002\000\010\042\uffc9\043\uffc9\050" +
    "\uffc9\001\002\000\004\046\065\001\002\000\012\014\070" +
    "\030\071\031\067\051\072\001\002\000\016\014\070\030" +
    "\071\031\067\040\uffa1\050\uffa1\051\072\001\002\000\022" +
    "\014\uff83\030\uff83\031\uff83\033\uff83\040\uff83\043\uff83\050" +
    "\uff83\051\uff83\001\002\000\016\014\070\030\071\031\067" +
    "\040\uffa2\050\uffa2\051\072\001\002\000\022\014\uff84\030" +
    "\uff84\031\uff84\033\uff84\040\uff84\043\uff84\050\uff84\051\uff84" +
    "\001\002\000\016\014\070\030\071\031\067\040\uffa3\050" +
    "\uffa3\051\072\001\002\000\004\050\074\001\002\000\004" +
    "\043\075\001\002\000\046\005\016\006\055\010\043\011" +
    "\045\012\041\014\020\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\042\uff9f\043\uff9f\050" +
    "\uff9f\051\035\001\002\000\010\042\uffa0\043\uffa0\050\uffa0" +
    "\001\002\000\006\040\uffa6\050\uffa6\001\002\000\006\040" +
    "\uffa5\050\uffa5\001\002\000\006\040\uffa4\050\uffa4\001\002" +
    "\000\004\051\104\001\002\000\006\013\111\050\112\001" +
    "\002\000\004\034\105\001\002\000\006\030\107\051\110" +
    "\001\002\000\006\013\uff92\050\uff92\001\002\000\010\013" +
    "\uff8f\021\uff8f\050\uff8f\001\002\000\010\013\uff8e\021\uff8e" +
    "\050\uff8e\001\002\000\006\046\117\051\120\001\002\000" +
    "\004\041\113\001\002\000\040\005\016\006\055\010\043" +
    "\011\045\012\041\014\020\017\040\020\031\022\044\023" +
    "\061\025\047\026\030\027\064\041\060\051\035\001\002" +
    "\000\004\042\115\001\002\000\046\005\016\006\055\010" +
    "\043\011\045\012\041\014\020\017\040\020\031\022\044" +
    "\023\061\025\047\026\030\027\064\041\060\042\uffc0\043" +
    "\uffc0\050\uffc0\051\035\001\002\000\010\042\uffc1\043\uffc1" +
    "\050\uffc1\001\002\000\004\051\123\001\002\000\004\034" +
    "\121\001\002\000\006\030\107\051\110\001\002\000\006" +
    "\013\uff91\050\uff91\001\002\000\004\034\124\001\002\000" +
    "\006\030\107\051\110\001\002\000\004\050\126\001\002" +
    "\000\006\013\uff90\050\uff90\001\002\000\004\042\130\001" +
    "\002\000\004\007\131\001\002\000\004\046\132\001\002" +
    "\000\004\051\104\001\002\000\006\013\111\050\134\001" +
    "\002\000\046\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\042\uffb4\043\uffb4\050\uffb4\051\035" +
    "\001\002\000\010\042\uffb5\043\uffb5\050\uffb5\001\002\000" +
    "\016\002\uffec\004\013\010\004\011\010\012\014\043\uffec" +
    "\001\002\000\006\002\ufff6\043\ufff6\001\002\000\004\051" +
    "\104\001\002\000\006\013\111\050\142\001\002\000\004" +
    "\015\143\001\002\000\004\041\144\001\002\000\040\005" +
    "\016\006\055\010\043\011\045\012\041\014\020\017\040" +
    "\020\031\022\044\023\061\025\047\026\030\027\064\041" +
    "\060\051\035\001\002\000\004\042\146\001\002\000\050" +
    "\005\016\006\055\010\043\011\045\012\041\014\020\016" +
    "\150\017\040\020\031\022\044\023\061\025\047\026\030" +
    "\027\064\041\060\042\uffc5\043\uffc5\050\uffc5\051\035\001" +
    "\002\000\010\042\uffc6\043\uffc6\050\uffc6\001\002\000\004" +
    "\041\152\001\002\000\010\042\uffc7\043\uffc7\050\uffc7\001" +
    "\002\000\040\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\051\035\001\002\000\004\042\154" +
    "\001\002\000\050\005\016\006\055\010\043\011\045\012" +
    "\041\014\020\016\150\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\042\uffc2\043\uffc2\050" +
    "\uffc2\051\035\001\002\000\010\042\uffc3\043\uffc3\050\uffc3" +
    "\001\002\000\010\042\uffc4\043\uffc4\050\uffc4\001\002\000" +
    "\010\042\uffe5\043\uffe5\050\uffe5\001\002\000\006\032\164" +
    "\046\uffe7\001\002\000\010\042\uffe4\043\uffe4\050\uffe4\001" +
    "\002\000\010\042\uffe3\043\uffe3\050\uffe3\001\002\000\010" +
    "\042\uffe2\043\uffe2\050\uffe2\001\002\000\012\030\071\031" +
    "\067\044\166\051\167\001\002\000\004\033\210\001\002" +
    "\000\004\043\206\001\002\000\010\033\174\035\173\036" +
    "\175\001\002\000\004\043\171\001\002\000\046\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\042\uff94\043\uff94\050\uff94\051\035\001\002\000\010\042" +
    "\uff9a\043\uff9a\050\uff9a\001\002\000\044\005\016\006\055" +
    "\010\043\011\045\012\041\014\020\017\040\020\031\022" +
    "\044\023\061\025\047\026\030\027\064\041\060\043\uffb7" +
    "\050\uffb7\051\035\001\002\000\010\030\071\031\067\051" +
    "\200\001\002\000\044\005\016\006\055\010\043\011\045" +
    "\012\041\014\020\017\040\020\031\022\044\023\061\025" +
    "\047\026\030\027\064\041\060\043\uffb6\050\uffb6\051\035" +
    "\001\002\000\006\043\uffb8\050\uffb8\001\002\000\004\043" +
    "\203\001\002\000\004\043\201\001\002\000\046\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\042\uff98\043\uff98\050\uff98\051\035\001\002\000\010\042" +
    "\uff9e\043\uff9e\050\uff9e\001\002\000\046\005\016\006\055" +
    "\010\043\011\045\012\041\014\020\017\040\020\031\022" +
    "\044\023\061\025\047\026\030\027\064\041\060\042\uff97" +
    "\043\uff97\050\uff97\051\035\001\002\000\010\042\uff9d\043" +
    "\uff9d\050\uff9d\001\002\000\006\043\uffb9\050\uffb9\001\002" +
    "\000\046\005\016\006\055\010\043\011\045\012\041\014" +
    "\020\017\040\020\031\022\044\023\061\025\047\026\030" +
    "\027\064\041\060\042\uff95\043\uff95\050\uff95\051\035\001" +
    "\002\000\010\042\uff9b\043\uff9b\050\uff9b\001\002\000\010" +
    "\030\071\031\067\051\212\001\002\000\004\043\215\001" +
    "\002\000\004\043\213\001\002\000\046\005\016\006\055" +
    "\010\043\011\045\012\041\014\020\017\040\020\031\022" +
    "\044\023\061\025\047\026\030\027\064\041\060\042\uff93" +
    "\043\uff93\050\uff93\051\035\001\002\000\010\042\uff99\043" +
    "\uff99\050\uff99\001\002\000\046\005\016\006\055\010\043" +
    "\011\045\012\041\014\020\017\040\020\031\022\044\023" +
    "\061\025\047\026\030\027\064\041\060\042\uff96\043\uff96" +
    "\050\uff96\051\035\001\002\000\010\042\uff9c\043\uff9c\050" +
    "\uff9c\001\002\000\012\014\070\030\071\031\067\051\072" +
    "\001\002\000\006\040\221\050\222\001\002\000\004\050" +
    "\230\001\002\000\006\033\223\043\224\001\002\000\004" +
    "\051\226\001\002\000\046\005\016\006\055\010\043\011" +
    "\045\012\041\014\020\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\042\uffa7\043\uffa7\050" +
    "\uffa7\051\035\001\002\000\010\042\uffab\043\uffab\050\uffab" +
    "\001\002\000\004\043\227\001\002\000\010\042\uffaa\043" +
    "\uffaa\050\uffaa\001\002\000\006\033\231\043\232\001\002" +
    "\000\004\051\233\001\002\000\010\042\uffa8\043\uffa8\050" +
    "\uffa8\001\002\000\004\043\234\001\002\000\010\042\uffa9" +
    "\043\uffa9\050\uffa9\001\002\000\016\005\016\014\020\030" +
    "\071\031\067\050\240\051\017\001\002\000\004\050\246" +
    "\001\002\000\004\050\243\001\002\000\004\043\241\001" +
    "\002\000\046\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\042\uff87\043\uff87\050\uff87\051\035" +
    "\001\002\000\010\042\uff8a\043\uff8a\050\uff8a\001\002\000" +
    "\004\043\244\001\002\000\046\005\016\006\055\010\043" +
    "\011\045\012\041\014\020\017\040\020\031\022\044\023" +
    "\061\025\047\026\030\027\064\041\060\042\uff86\043\uff86" +
    "\050\uff86\051\035\001\002\000\010\042\uff89\043\uff89\050" +
    "\uff89\001\002\000\004\043\247\001\002\000\046\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\042\uff85\043\uff85\050\uff85\051\035\001\002\000\010\042" +
    "\uff88\043\uff88\050\uff88\001\002\000\046\005\uffd6\006\uffd6" +
    "\010\043\011\045\012\041\014\uffd6\017\uffd6\020\uffd6\022" +
    "\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\050\uffd6\051\uffd6\001\002\000\046\005\uffd0\006" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\017\uffd0\020\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\050\uffd0\051\uffd0\001\002\000\010\032\255" +
    "\043\256\045\254\001\002\000\006\043\252\051\253\001" +
    "\002\000\012\014\261\030\071\031\067\044\260\001\002" +
    "\000\046\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\014" +
    "\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\041\uffd1\042\uffd1\043\uffd1\050\uffd1\051\uffd1\001" +
    "\002\000\006\043\252\051\253\001\002\000\006\043\252" +
    "\051\253\001\002\000\006\043\252\051\253\001\002\000" +
    "\046\005\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\050\uffd4\051\uffd4\001\002" +
    "\000\046\005\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\014" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\041\uffd2\042\uffd2\043\uffd2\050\uffd2\051\uffd2\001" +
    "\002\000\046\005\uffd3\006\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\014\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\041\uffd3\042\uffd3\043\uffd3\050\uffd3\051\uffd3" +
    "\001\002\000\046\005\uffd5\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\014\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\041\uffd5\042\uffd5\043\uffd5\050\uffd5\051" +
    "\uffd5\001\002\000\040\005\uffd9\006\uffd9\014\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\050\uffd9\051\uffd9\001\002\000\010" +
    "\030\272\031\271\051\273\001\002\000\004\050\274\001" +
    "\002\000\004\050\uff8b\001\002\000\004\050\uff8d\001\002" +
    "\000\004\050\uff8c\001\002\000\004\022\275\001\002\000" +
    "\004\037\313\001\002\000\046\005\016\006\055\010\043" +
    "\011\045\012\041\014\020\017\040\020\031\022\277\023" +
    "\061\025\047\026\030\027\064\041\060\042\uffb0\043\uffb0" +
    "\050\uffb0\051\035\001\002\000\006\037\301\046\267\001" +
    "\002\000\010\042\uffb1\043\uffb1\050\uffb1\001\002\000\004" +
    "\030\302\001\002\000\004\037\303\001\002\000\004\040" +
    "\304\001\002\000\004\041\305\001\002\000\040\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\051\035\001\002\000\004\042\307\001\002\000\004\043" +
    "\310\001\002\000\004\024\311\001\002\000\004\043\312" +
    "\001\002\000\046\005\uffaf\006\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\014\uffaf\017\uffaf\020\uffaf\022\uffaf\023\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\041\uffaf\042\uffaf\043\uffaf\050\uffaf\051" +
    "\uffaf\001\002\000\004\030\314\001\002\000\004\037\315" +
    "\001\002\000\004\040\316\001\002\000\004\041\317\001" +
    "\002\000\040\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\051\035\001\002\000\004\042\321" +
    "\001\002\000\004\043\322\001\002\000\004\024\323\001" +
    "\002\000\004\043\324\001\002\000\046\005\uffae\006\uffae" +
    "\010\uffae\011\uffae\012\uffae\014\uffae\017\uffae\020\uffae\022" +
    "\uffae\023\uffae\025\uffae\026\uffae\027\uffae\041\uffae\042\uffae" +
    "\043\uffae\050\uffae\051\uffae\001\002\000\046\005\uffd8\006" +
    "\uffd8\010\043\011\045\012\041\014\uffd8\017\uffd8\020\uffd8" +
    "\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\050\uffd8\051\uffd8\001\002\000\040\005\uffdb" +
    "\006\uffdb\014\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\041\uffdb\042\uffdb\043\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\040\005\016\006\055\010\043\011" +
    "\045\012\041\014\020\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\051\035\001\002\000" +
    "\010\042\uffdd\043\uffdd\050\uffdd\001\002\000\046\005\uffd7" +
    "\006\uffd7\010\043\011\045\012\041\014\uffd7\017\uffd7\020" +
    "\uffd7\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\050\uffd7\051\uffd7\001\002\000\040\005" +
    "\uffda\006\uffda\014\uffda\017\uffda\020\uffda\022\uffda\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\041\uffda\042\uffda\043\uffda\050" +
    "\uffda\051\uffda\001\002\000\016\004\013\010\004\011\010" +
    "\012\014\047\012\051\007\001\002\000\004\043\335\001" +
    "\002\000\004\051\337\001\002\000\004\043\343\001\002" +
    "\000\004\034\340\001\002\000\006\030\342\051\341\001" +
    "\002\000\004\043\uffba\001\002\000\004\043\uffbb\001\002" +
    "\000\004\051\345\001\002\000\004\050\346\001\002\000" +
    "\006\035\173\036\175\001\002\000\004\041\347\001\002" +
    "\000\040\005\016\006\055\010\043\011\045\012\041\014" +
    "\020\017\040\020\031\022\044\023\061\025\047\026\030" +
    "\027\064\041\060\051\035\001\002\000\004\042\351\001" +
    "\002\000\046\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\042\uffbe\043\uffbe\050\uffbe\051\035" +
    "\001\002\000\010\042\uffbf\043\uffbf\050\uffbf\001\002\000" +
    "\006\030\107\051\110\001\002\000\004\021\355\001\002" +
    "\000\006\030\107\051\110\001\002\000\004\050\357\001" +
    "\002\000\004\041\360\001\002\000\040\005\016\006\055" +
    "\010\043\011\045\012\041\014\020\017\040\020\031\022" +
    "\044\023\061\025\047\026\030\027\064\041\060\051\035" +
    "\001\002\000\004\042\362\001\002\000\046\005\016\006" +
    "\055\010\043\011\045\012\041\014\020\017\040\020\031" +
    "\022\044\023\061\025\047\026\030\027\064\041\060\042" +
    "\uffb2\043\uffb2\050\uffb2\051\035\001\002\000\010\042\uffb3" +
    "\043\uffb3\050\uffb3\001\002\000\012\014\070\030\071\031" +
    "\067\051\072\001\002\000\004\050\366\001\002\000\004" +
    "\043\367\001\002\000\046\005\016\006\055\010\043\011" +
    "\045\012\041\014\020\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\042\uffac\043\uffac\050" +
    "\uffac\051\035\001\002\000\010\042\uffad\043\uffad\050\uffad" +
    "\001\002\000\004\050\372\001\002\000\004\041\373\001" +
    "\002\000\040\005\016\006\055\010\043\011\045\012\041" +
    "\014\020\017\040\020\031\022\044\023\061\025\047\026" +
    "\030\027\064\041\060\051\035\001\002\000\004\042\375" +
    "\001\002\000\016\002\uffe9\004\013\010\004\011\010\012" +
    "\014\043\uffe9\001\002\000\006\002\ufff3\043\ufff3\001\002" +
    "\000\004\050\u0100\001\002\000\004\041\u0101\001\002\000" +
    "\040\005\016\006\055\010\043\011\045\012\041\014\020" +
    "\017\040\020\031\022\044\023\061\025\047\026\030\027" +
    "\064\041\060\051\035\001\002\000\004\042\u0103\001\002" +
    "\000\016\002\uffef\004\013\010\004\011\010\012\014\043" +
    "\uffef\001\002\000\006\002\ufff9\043\ufff9\001\002\000\004" +
    "\046\u0106\001\002\000\004\004\u0107\001\002\000\004\050" +
    "\u0108\001\002\000\004\041\u0109\001\002\000\040\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\051\035\001\002\000\004\042\u010b\001\002\000\016\002" +
    "\ufff2\004\013\010\004\011\010\012\014\043\ufff2\001\002" +
    "\000\006\002\ufffc\043\ufffc\001\002\000\004\043\u010e\001" +
    "\002\000\014\004\ufffd\010\ufffd\011\ufffd\012\ufffd\047\012" +
    "\001\002\000\012\004\ufffe\010\ufffe\011\ufffe\012\ufffe\001" +
    "\002\000\004\046\u0111\001\002\000\010\010\u0112\011\u0113" +
    "\012\u0114\001\002\000\004\051\u0121\001\002\000\004\051" +
    "\u011b\001\002\000\004\051\u0115\001\002\000\004\050\u0116" +
    "\001\002\000\004\041\u0117\001\002\000\040\005\016\006" +
    "\055\010\043\011\045\012\041\014\020\017\040\020\031" +
    "\022\044\023\061\025\047\026\030\027\064\041\060\051" +
    "\035\001\002\000\004\042\u0119\001\002\000\016\002\uffed" +
    "\004\013\010\004\011\010\012\014\043\uffed\001\002\000" +
    "\006\002\ufff7\043\ufff7\001\002\000\004\050\u011c\001\002" +
    "\000\004\041\u011d\001\002\000\040\005\016\006\055\010" +
    "\043\011\045\012\041\014\020\017\040\020\031\022\044" +
    "\023\061\025\047\026\030\027\064\041\060\051\035\001" +
    "\002\000\004\042\u011f\001\002\000\016\002\uffea\004\013" +
    "\010\004\011\010\012\014\043\uffea\001\002\000\006\002" +
    "\ufff4\043\ufff4\001\002\000\004\050\u0122\001\002\000\004" +
    "\041\u0123\001\002\000\040\005\016\006\055\010\043\011" +
    "\045\012\041\014\020\017\040\020\031\022\044\023\061" +
    "\025\047\026\030\027\064\041\060\051\035\001\002\000" +
    "\004\042\u0125\001\002\000\016\002\ufff0\004\013\010\004" +
    "\011\010\012\014\043\ufff0\001\002\000\006\002\ufffa\043" +
    "\ufffa\001\002\000\006\030\u0129\051\u0128\001\002\000\006" +
    "\002\uffbc\043\uffbc\001\002\000\006\002\uffbd\043\uffbd\001" +
    "\002\000\004\002\000\001\002\000\006\002\001\043\001" +
    "\001\002\000\004\046\u012d\001\002\000\010\010\u012e\011" +
    "\u012f\012\u0130\001\002\000\004\051\u013d\001\002\000\004" +
    "\051\u0137\001\002\000\004\051\u0131\001\002\000\004\050" +
    "\u0132\001\002\000\004\041\u0133\001\002\000\040\005\016" +
    "\006\055\010\043\011\045\012\041\014\020\017\040\020" +
    "\031\022\044\023\061\025\047\026\030\027\064\041\060" +
    "\051\035\001\002\000\004\042\u0135\001\002\000\016\002" +
    "\uffee\004\013\010\004\011\010\012\014\043\uffee\001\002" +
    "\000\006\002\ufff8\043\ufff8\001\002\000\004\050\u0138\001" +
    "\002\000\004\041\u0139\001\002\000\040\005\016\006\055" +
    "\010\043\011\045\012\041\014\020\017\040\020\031\022" +
    "\044\023\061\025\047\026\030\027\064\041\060\051\035" +
    "\001\002\000\004\042\u013b\001\002\000\016\002\uffeb\004" +
    "\013\010\004\011\010\012\014\043\uffeb\001\002\000\006" +
    "\002\ufff5\043\ufff5\001\002\000\004\050\u013e\001\002\000" +
    "\004\041\u013f\001\002\000\040\005\016\006\055\010\043" +
    "\011\045\012\041\014\020\017\040\020\031\022\044\023" +
    "\061\025\047\026\030\027\064\041\060\051\035\001\002" +
    "\000\004\042\u0141\001\002\000\016\002\ufff1\004\013\010" +
    "\004\011\010\012\014\043\ufff1\001\002\000\006\002\ufffb" +
    "\043\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\010\002\005\003\004\004\010\001\001\000" +
    "\004\006\u012b\001\001\000\004\004\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0104\001\001" +
    "\000\004\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\056\006\045" +
    "\011\032\012\052\013\033\015\035\016\051\017\050\020" +
    "\047\021\062\023\041\024\055\025\036\026\061\027\053" +
    "\034\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\330\001\001\000\002\001\001\000\004" +
    "\007\324\001\001\000\002\001\001\000\004\007\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\045\011" +
    "\156\013\033\015\035\016\051\017\050\020\047\021\062" +
    "\024\161\025\160\026\162\027\053\034\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\126\006\045\011\032\012\052\013" +
    "\033\015\035\016\051\017\050\020\047\021\062\023\041" +
    "\024\055\025\036\026\061\027\053\034\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\072\033\065\001\001\000\006\010" +
    "\100\033\065\001\001\000\002\001\001\000\006\010\077" +
    "\033\065\001\001\000\002\001\001\000\006\010\076\033" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\075\006\045\011\032\012\052\013\033\015\035\016" +
    "\051\017\050\020\047\021\062\023\041\024\055\025\036" +
    "\026\061\027\053\034\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\005\113\006\045\011\032\012\052\013\033\015\035" +
    "\016\051\017\050\020\047\021\062\023\041\024\055\025" +
    "\036\026\061\027\053\034\031\001\001\000\002\001\001" +
    "\000\042\005\115\006\045\011\032\012\052\013\033\015" +
    "\035\016\051\017\050\020\047\021\062\023\041\024\055" +
    "\025\036\026\061\027\053\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\132\001\001\000\002\001\001\000\042\005\134\006\045" +
    "\011\032\012\052\013\033\015\035\016\051\017\050\020" +
    "\047\021\062\023\041\024\055\025\036\026\061\027\053" +
    "\034\031\001\001\000\002\001\001\000\004\004\136\001" +
    "\001\000\002\001\001\000\004\030\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\144\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\044" +
    "\005\150\006\045\011\032\012\052\013\033\014\146\015" +
    "\035\016\051\017\050\020\047\021\062\023\041\024\055" +
    "\025\036\026\061\027\053\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\152" +
    "\006\045\011\032\012\052\013\033\015\035\016\051\017" +
    "\050\020\047\021\062\023\041\024\055\025\036\026\061" +
    "\027\053\034\031\001\001\000\002\001\001\000\044\005" +
    "\155\006\045\011\032\012\052\013\033\014\154\015\035" +
    "\016\051\017\050\020\047\021\062\023\041\024\055\025" +
    "\036\026\061\027\053\034\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\167\033\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\171" +
    "\006\045\011\032\012\052\013\033\015\035\016\051\017" +
    "\050\020\047\021\062\023\041\024\055\025\036\026\061" +
    "\027\053\034\031\001\001\000\002\001\001\000\042\005" +
    "\204\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\004\033\176\001\001" +
    "\000\042\005\175\006\045\011\032\012\052\013\033\015" +
    "\035\016\051\017\050\020\047\021\062\023\041\024\055" +
    "\025\036\026\061\027\053\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\201" +
    "\006\045\011\032\012\052\013\033\015\035\016\051\017" +
    "\050\020\047\021\062\023\041\024\055\025\036\026\061" +
    "\027\053\034\031\001\001\000\002\001\001\000\042\005" +
    "\203\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\206\006\045\011\032\012\052\013" +
    "\033\015\035\016\051\017\050\020\047\021\062\023\041" +
    "\024\055\025\036\026\061\027\053\034\031\001\001\000" +
    "\002\001\001\000\004\033\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\213\006\045\011\032\012" +
    "\052\013\033\015\035\016\051\017\050\020\047\021\062" +
    "\023\041\024\055\025\036\026\061\027\053\034\031\001" +
    "\001\000\002\001\001\000\042\005\215\006\045\011\032" +
    "\012\052\013\033\015\035\016\051\017\050\020\047\021" +
    "\062\023\041\024\055\025\036\026\061\027\053\034\031" +
    "\001\001\000\002\001\001\000\006\010\217\033\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\224\006\045\011\032\012" +
    "\052\013\033\015\035\016\051\017\050\020\047\021\062" +
    "\023\041\024\055\025\036\026\061\027\053\034\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\236\033\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\241\006\045\011\032\012\052\013\033" +
    "\015\035\016\051\017\050\020\047\021\062\023\041\024" +
    "\055\025\036\026\061\027\053\034\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\244\006\045\011" +
    "\032\012\052\013\033\015\035\016\051\017\050\020\047" +
    "\021\062\023\041\024\055\025\036\026\061\027\053\034" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\247\006\045\011\032\012\052\013\033\015\035\016" +
    "\051\017\050\020\047\021\062\023\041\024\055\025\036" +
    "\026\061\027\053\034\031\001\001\000\002\001\001\000" +
    "\004\012\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\264\001\001\000\004\033\256\001\001\000" +
    "\002\001\001\000\004\007\263\001\001\000\004\007\262" +
    "\001\001\000\004\007\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\275\001\001\000\002\001\001\000\042\005\277\006" +
    "\045\011\032\012\052\013\033\015\035\016\051\017\050" +
    "\020\047\021\062\023\041\024\055\025\036\026\061\027" +
    "\053\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\305\006\045\011\032\012\052" +
    "\013\033\015\035\016\051\017\050\020\047\021\062\023" +
    "\041\024\055\025\036\026\061\027\053\034\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\317\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\325\001\001\000\002\001\001\000\042" +
    "\005\327\006\045\011\032\012\052\013\033\015\035\016" +
    "\051\017\050\020\047\021\062\023\041\024\055\025\036" +
    "\026\061\027\053\034\031\001\001\000\002\001\001\000" +
    "\004\012\331\001\001\000\002\001\001\000\010\002\333" +
    "\003\004\004\010\001\001\000\002\001\001\000\004\022" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\347\006\045\011\032\012\052\013" +
    "\033\015\035\016\051\017\050\020\047\021\062\023\041" +
    "\024\055\025\036\026\061\027\053\034\031\001\001\000" +
    "\002\001\001\000\042\005\351\006\045\011\032\012\052" +
    "\013\033\015\035\016\051\017\050\020\047\021\062\023" +
    "\041\024\055\025\036\026\061\027\053\034\031\001\001" +
    "\000\002\001\001\000\004\031\353\001\001\000\002\001" +
    "\001\000\004\031\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\360\006\045\011\032\012\052\013" +
    "\033\015\035\016\051\017\050\020\047\021\062\023\041" +
    "\024\055\025\036\026\061\027\053\034\031\001\001\000" +
    "\002\001\001\000\042\005\362\006\045\011\032\012\052" +
    "\013\033\015\035\016\051\017\050\020\047\021\062\023" +
    "\041\024\055\025\036\026\061\027\053\034\031\001\001" +
    "\000\002\001\001\000\006\010\364\033\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\367\006\045" +
    "\011\032\012\052\013\033\015\035\016\051\017\050\020" +
    "\047\021\062\023\041\024\055\025\036\026\061\027\053" +
    "\034\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\373\006\045\011\032\012\052" +
    "\013\033\015\035\016\051\017\050\020\047\021\062\023" +
    "\041\024\055\025\036\026\061\027\053\034\031\001\001" +
    "\000\002\001\001\000\004\004\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\u0101" +
    "\006\045\011\032\012\052\013\033\015\035\016\051\017" +
    "\050\020\047\021\062\023\041\024\055\025\036\026\061" +
    "\027\053\034\031\001\001\000\002\001\001\000\004\004" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\u0109\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\004" +
    "\004\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\u0117\006\045\011\032\012\052\013\033\015\035\016" +
    "\051\017\050\020\047\021\062\023\041\024\055\025\036" +
    "\026\061\027\053\034\031\001\001\000\002\001\001\000" +
    "\004\004\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\u011d\006\045\011\032\012" +
    "\052\013\033\015\035\016\051\017\050\020\047\021\062" +
    "\023\041\024\055\025\036\026\061\027\053\034\031\001" +
    "\001\000\002\001\001\000\004\004\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\u0123\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\004" +
    "\004\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\u0133\006\045\011\032\012" +
    "\052\013\033\015\035\016\051\017\050\020\047\021\062" +
    "\023\041\024\055\025\036\026\061\027\053\034\031\001" +
    "\001\000\002\001\001\000\004\004\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\u0139\006\045\011\032\012\052\013\033\015\035\016\051" +
    "\017\050\020\047\021\062\023\041\024\055\025\036\026" +
    "\061\027\053\034\031\001\001\000\002\001\001\000\004" +
    "\004\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\005\u013f\006\045\011\032\012\052" +
    "\013\033\015\035\016\051\017\050\020\047\021\062\023" +
    "\041\024\055\025\036\026\061\027\053\034\031\001\001" +
    "\000\002\001\001\000\004\004\u0141\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public boolean indicador=false;

    public boolean isIndicador() {
        return indicador;
    }

    public void setIndicador(boolean indicador) {
        this.indicador = indicador;
    }

public void syntax_error(Symbol s) {
JOptionPane.showMessageDialog(null, "error de sintaxis en = "+s.toString());
setIndicador(true);
}

public void unrecovered_syntax_error(Symbol s) throws
java.lang.Exception {
JOptionPane.showMessageDialog(null, "error de sintaxis irrecuperable en ="+s.toString()); }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NUMERO ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMERO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NUMERO ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMERO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNCION ::= VALORINICIO PIZQUIERDO NUMERO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUNCION ::= VALORINICIO PIZQUIERDO VALORINICIO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUNCION ::= VALORINICIO PIZQUIERDO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCION ::= VALORINICIO PIZQUIERDO NUMERO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCION ::= VALORINICIO PIZQUIERDO VALORINICIO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCION ::= VALORINICIO PIZQUIERDO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPR ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPR ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPR ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMPARANTE ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARANTE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMPARANTE ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARANTE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONDICION ::= CONDICION CONDICIONAL PIZQUIERDO VARIABLE COMPARADORES COMPARANTE PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICION ::= CONDICION CONDICIONAL VARIABLE COMPARADORES COMPARANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICION ::= VARIABLE COMPARADORES COMPARANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sOPERACION ::= VARIABLE ASIGNADOR NUMERO OPERADORES VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sOPERACION ::= VARIABLE ASIGNADOR VALORAD PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sOPERACION ::= VARIABLE ASIGNADOR BOOLS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sOPERACION ::= VARIABLE ASIGNADOR NUMERO OPERADORES NUMERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sOPERACION ::= VARIABLE ASIGNADOR VARIABLE OPERADORES NUMERO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sOPERACION ::= VARIABLE ASIGNADOR VARIABLE OPERADORES VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sOPERACION ::= VARIABLE ASIGNADOR NUMERO OPERADORES VARIABLE PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sOPERACION ::= VARIABLE ASIGNADOR VALORAD PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sOPERACION ::= VARIABLE ASIGNADOR BOOLS PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sOPERACION ::= VARIABLE ASIGNADOR NUMERO OPERADORES NUMERO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sOPERACION ::= VARIABLE ASIGNADOR VARIABLE OPERADORES NUMERO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sOPERACION ::= VARIABLE ASIGNADOR VARIABLE OPERADORES VARIABLE PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPERACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sMENSAJE ::= MENSAJE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sMENSAJE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sMENSAJE ::= MENSAJE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sMENSAJE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // QESCRIBO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // QESCRIBO ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // QESCRIBO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // QESCRIBO ::= NUMERO QESCRIBO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // QESCRIBO ::= CADENA QESCRIBO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // QESCRIBO ::= VARIABLE QESCRIBO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QESCRIBO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sESCRITURA ::= ESCRIBE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sESCRITURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sESCRITURA ::= ESCRIBE PIZQUIERDO QESCRIBO DOSPUNTOS PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sESCRITURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sESCRITURA ::= ESCRIBE PIZQUIERDO QESCRIBO DOSPUNTOS PDERECHO OPERADORES VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sESCRITURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sESCRITURA ::= ESCRIBE PIZQUIERDO QESCRIBO PDERECHO OPERADORES VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sESCRITURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sESCRITURA ::= ESCRIBE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sESCRITURA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sLECTURA ::= LEE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sLECTURA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sLECTURA ::= LEE PIZQUIERDO QESCRIBO PDERECHO PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sLECTURA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPLISTA ::= OPCION GUIONBAJO ENTERO GUIONBAJO DOSPUNTOS LIZQUIERDO CONTENIDO LDERECHO PUNTOCOMA RETORNA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPLISTA ::= OPLISTA OPCION GUIONBAJO ENTERO GUIONBAJO DOSPUNTOS LIZQUIERDO CONTENIDO LDERECHO PUNTOCOMA RETORNA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sOPCION ::= OPCION PIZQUIERDO OPR PDERECHO OPLISTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sOPCION ::= OPCION PIZQUIERDO OPR PDERECHO OPLISTA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sOPCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sPORCADA ::= PORCADA PIZQUIERDO COMPARANTE EN COMPARANTE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPORCADA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sPORCADA ::= PORCADA PIZQUIERDO COMPARANTE EN COMPARANTE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPORCADA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sHACERMIENTRAS ::= LIZQUIERDO CONTENIDO LDERECHO HACERMIENTRAS PIZQUIERDO CONDICION PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sHACERMIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sHACERMIENTRAS ::= LIZQUIERDO CONTENIDO LDERECHO HACERMIENTRAS PIZQUIERDO CONDICION PDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sHACERMIENTRAS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALORAD ::= VARIABLE DECREMENTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORAD ::= VARIABLE INCREMENTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORAD ::= VARIABLE DECREMENTADOR CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORAD ::= VARIABLE INCREMENTADOR CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORAD",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LIMITANTE ::= VARIABLE COMPARADORES VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIMITANTE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LIMITANTE ::= VARIABLE COMPARADORES ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIMITANTE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INICIO ::= VARIABLE ASIGNADOR VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INICIO ::= VARIABLE ASIGNADOR ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sPARA ::= PARA PIZQUIERDO INICIO PUNTOCOMA LIMITANTE PUNTOCOMA VALORAD PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPARA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sPARA ::= PARA PIZQUIERDO INICIO PUNTOCOMA LIMITANTE PUNTOCOMA VALORAD PDERECHO LIZQUIERDO CONTENIDO LDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sPARA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sMIENTRAS ::= MIENTRAS PIZQUIERDO CONDICION PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sMIENTRAS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sMIENTRAS ::= MIENTRAS PIZQUIERDO CONDICION PDERECHO LIZQUIERDO CONTENIDO LDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sMIENTRAS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sSIC ::= SINO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSIC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sSIC ::= SINO LIZQUIERDO CONTENIDO LDERECHO sSIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSIC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sSIC ::= SINO LIZQUIERDO CONTENIDO LDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSIC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sSI ::= SI PIZQUIERDO CONDICION PDERECHO ENTONCES LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSI",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sSI ::= SI PIZQUIERDO CONDICION PDERECHO ENTONCES LIZQUIERDO CONTENIDO LDERECHO sSIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSI",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sSI ::= SI PIZQUIERDO CONDICION PDERECHO ENTONCES LIZQUIERDO CONTENIDO LDERECHO CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sSI",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= sOPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= sOPCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= sPORCADA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= sHACERMIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= sPARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= sMIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= sSI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SBUCLE ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SBUCLE ::= VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SBUCLE ::= VARIABLE ASIGNADOR BOOLS SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SBUCLE ::= VARIABLE ASIGNADOR NUMERO SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SBUCLE ::= VARIABLE ASIGNADOR CADENA SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SBUCLE ::= VARIABLE COMA SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SBUCLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONES ::= TIPOBOOLEANO SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONES ::= TIPONUMBER SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONES ::= TIPOCHARS SBUCLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONES ::= TIPOBOOLEANO SBUCLE DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONES ::= TIPONUMBER SBUCLE DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONES ::= TIPOCHARS SBUCLE DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO ::= sMENSAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO ::= VALORAD PUNTOCOMA CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO ::= sLECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO ::= sESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO ::= DECLARACIONES sMENSAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO ::= DECLARACIONES sLECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO ::= DECLARACIONES sESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO ::= DECLARACIONES SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORINICIO ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORINICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORINICIO ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORINICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALORINICIO ::= PRINCIPAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORINICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= NUEVO VALORINICIO PIZQUIERDO NUEVO PDERECHO LIZQUIERDO CONTENIDO LDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPOBOOLEANO VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPONUMBER VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= TIPONUMBER VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= TIPOBOOLEANO VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= TIPOCHARS VALORINICIO PIZQUIERDO TIPOCHARS VARIABLE PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= NUEVO VALORINICIO PIZQUIERDO NUEVO PDERECHO LIZQUIERDO CONTENIDO LDERECHO CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABEZA ::= LIBRERIA VARIABLE PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABEZA ::= LIBRERIA VARIABLE PUNTOCOMA CABEZA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= CABEZA CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

